const { links } = require('express/lib/response');
const mongoose = require('mongoose');

/**
 * @openapi
 * components:
 *  schemas:
 *   Microphone:
 *    type: object
 *    required:
 *     - name
 *     - manufactor
 *     - year
 *     - technology
 *     - preamp
 *     - user
 *    properties:
 *     _id:
 *       type: string
 *       description: the autogenerated unique microphone id
 *       example: 507f1f77bcf86cd799439011
 *     name:
 *      type: string
 *      description: the microphone model name
 *      example: Neumann u47
 *     manufactor:
 *      type: string
 *      description: the microphone manufactor
 *      example: Georg Neumann GmbH
 *     year:
 *      type: number
 *      format: float
 *      description: the microphone release year
 *      example: 1947
 *     technology:
 *      type: string
 *      description: the microphone technology
 *      enum:
 *       - dynamic
 *       - condenser
 *       - ribbon
 *       - other
 *      example: condenser
 *     preamp:
 *      type: string
 *      description: the microphone preamp technology (transistor, tube, other)
 *      enum:
 *       - transistor
 *       - tube
 *       - other
 *      example: tube
 *     specs:
 *      type: object
 *      description: the microphone specifications
 *      properties:
 *        frequencyRange:
 *          description: the microphone frequency range
 *          type: object
 *          properties:
 *           min:
 *             type: number
 *             description: the bottom range limit
 *             example: 40
 *           max:
 *             type: number
 *             description: the top range limit
 *             example: 16000
 *        maxSpl:
 *         type: number
 *         description: the max sound pressur elevel accepted by the microphone
 *         example: 147
 *        sNRatio:
 *         type: number
 *         description: the microphone ratio between sound and noise
 *         example: 76
 *        sensitivity:
 *         type: number
 *         description: the microphone sensitivity
 *         example: 8
 *        distortion:
 *         type: number
 *         format: float
 *         description: the amount of distortion introduced by the microphone
 *         minimum: 0
 *         maximum: 1
 *         example: 0.05
 *        polarPatterns:
 *         type: object
 *         description: the differens polar patterns implemented in the microphone
 *         properties:
 *          omnidirectional:
 *           type: boolean
 *           Description: An omnidirectional polar pattern
 *           example: false
 *          cardioid:
 *           type: boolean
 *           Description: A cardioid polar pattern
 *           example: true
 *          superCardioid:
 *           type: boolean
 *           Description: A superCardioid polar pattern
 *           example: false
 *          hyperCardioid:
 *           type: boolean
 *           Description: A hyperCardioid polar pattern
 *           example: false
 *          figure8:
 *           type: boolean
 *           Description: A figure8 polar pattern
 *           example: false
 *          shotgun:
 *           type: boolean
 *           Description: A shotgun polar pattern
 *           example: false
 *     image:
 *      type: string
 *      description: the main microphone image
 *      example: https://media.sweetwater.com/images/items/750/U47-large.jpg?v=4dab0786931123a9
 *     rating:
 *      type: number
 *      format: int32
 *      description: the microphone's rating
 *      minimim: 0
 *      maximum: 5
 *      example: 5
 *     user:
 *      type: string
 *      description: the microphone's user unique id
 *      example: 507f1f77bcf86cd799439011
 *     createdAt:
 *      type: date
 *      description: the autogenerated creation timestamp
 *      example: 2022-03-06T14:19:01.253Z
 *     updatedAt:
 *      type: date
 *      description: the autogenerated update timestamp
 *      example: 2022-03-06T14:19:01.253Z
 *     __v:
 *      type: number
 *      description: the microphone's database versionKey
 *      example: 0
 */
const micSchema = mongoose.Schema(
    {
        name: {
            type: String,
            required: true,
        },
        manufactor: {
            type: String,
            required: true,
        },
        year: Number,
        technology: {
            type: String,
            enum: ['dynamic', 'condenser', 'ribbon', 'other'],
            required: true,
        },
        preamp: {
            type: String,
            enum: ['transistor', 'tube', 'other'],
            required: true,
        },
        specs: {
            frequencyRange: {
                low: Number,
                high: Number,
            },
            maxSpl: Number,
            sNRatio: Number,
            sensitivity: Number,
            distortion: {
                type: Number,
                min: 0,
                max: 1,
            },
            polarPatterns: {
                omnidirectional: {
                    type: Boolean,
                    default: null,
                },
                cardioid: {
                    type: Boolean,
                    default: null,
                },
                superCardioid: {
                    type: Boolean,
                    default: null,
                },
                hyperCardioid: {
                    type: Boolean,
                    default: null,
                },
                figure8: {
                    type: Boolean,
                    default: null,
                },
                shotgun: {
                    type: Boolean,
                    default: null,
                },
            },
        },
        image: {
            type: String,
            default: 'https://toppng.com/uploads/preview/mic-icon-11553430296usfhy8bwwf.png',
        },
        rating: {
            type: Number,
            min: 0,
            max: 5,
            validate: {
                validator: Number.isInteger,
                message: '{VALUE} must be an integer',
            },
            default: null,
        },
        user: {
            type: mongoose.Schema.Types.ObjectId,
            required: true,
            ref: 'User',
        },
    },
    {
        timestamps: true,
    },
);

module.exports = mongoose.model('Mic', micSchema);
